{"mappings":"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","sources":["src/index.js","src/ZeroWidthApi.js","src/ZeroWidthApiExpress.js"],"sourcesContent":["// index.js\nimport ZeroWidthApi from './ZeroWidthApi.js';\nimport ZeroWidthApiExpress from './ZeroWidthApiExpress.js';\n\nexport { ZeroWidthApi, ZeroWidthApiExpress };\n","import axios from 'axios';\n\nclass ZeroWidthApi {\n  constructor({ secretKey, appId, intelligenceId }) {\n    \n    // Validate input parameters\n    if (!secretKey) {\n      throw new Error('Missing required constructor parameters: secretKey, and appId must be provided');\n    }\n\n    this.secretKey = secretKey;\n    this.appId = appId;\n    this.intelligenceId = intelligenceId;\n    this.baseUrl = 'https://api.zerowidth.ai';\n  }\n\n  async makeApiCall(endpoint, options = {}) {\n    const url = `${this.baseUrl}/${endpoint}`;\n\n    const headers = {\n      'Authorization': `Bearer ${this.secretKey}`,\n      'Content-Type': 'application/json',\n      ...options.headers,\n    };\n\n    try {\n      const response = await axios({\n        method: options.method || 'get',\n        url,\n        headers,\n        data: options.body,\n        params: options.params,\n      });\n      return response.data;\n    } catch (error) {\n      // console.error('Error making API call:', error);\n      throw error;\n    }\n  }\n\n  // Process data through an installed intellgience\n  async process({appId, intelligenceId, data, userId, sessionId, stateful, verbose} = {}) {\n    \n    let url = `process/${appId || this.appId}/${intelligenceId || this.intelligenceId}`;\n    if(verbose) url += \"?verbose=true\";\n\n    if(stateful && (!userId || !sessionId)) throw new Error(\"Stateful processing requires a userId and sessionId\");\n\n\n    return this.makeApiCall(url, {\n      method: 'POST',\n      body: {\n        user_id: userId,\n        session_id: sessionId,\n        stateful,\n        data\n      },\n    });\n  }\n\n  // Method to get history with pagination support\n  async getHistory({ appId, intelligenceId, userId, sessionId, startAfter } = {}) {\n\n    const endpoint = `history/${appId || this.appId}/${intelligenceId || this.intelligenceId}/${userId}/${sessionId}`;\n    const params = startAfter ? { startAfter } : {};\n\n    return this.makeApiCall(endpoint, {\n      method: 'GET',\n      params: params, // Pass startAfter as a query parameter if it exists\n    });\n  }\n\n}\n\nexport default ZeroWidthApi;","// ZeroWidthApiMiddleware.js\nimport express from 'express';\nimport ZeroWidthApi from './ZeroWidthApi.js'; \n\nconst processRouteHandler = async (req, res, next, secretKey, onProcess, onError, returnsResponse) => {\n\n  const { app_id, intelligence_id } = req.params;\n\n  const zerowidthApi = new ZeroWidthApi({\n    secretKey: secretKey,\n    appId: app_id,\n    intelligenceId: intelligence_id\n  });\n\n\n  try {\n    const result = await zerowidthApi.process(req.body);\n    if (onProcess) {\n      onProcess(result);\n    }\n    \n    if (returnsResponse) {\n      res.json(result.output_data);\n    } else {\n      req.zerowidthResult = result;\n      next();\n    }\n  } catch (error) {\n    // console.error('API call failed:', error);\n\n    if(onError && error.response) {\n      onError(error.response.data);\n    }\n\n    res.status(500).send('Internal Server Error');\n  }\n};\n\nconst historyRouteHandler = async (req, res, next, secretKey, onProcess, onError, returnsResponse) => {\n  const { app_id, intelligence_id, user_id, session_id } = req.params;\n  const { startAfter } = req.query;\n  \n  \n  const zerowidthApi = new ZeroWidthApi({\n    secretKey: secretKey,\n    appId: app_id,\n    intelligenceId: intelligence_id\n  });\n\n  try {\n    const history = await zerowidthApi.getHistory({\n      userId: user_id,\n      sessionId: session_id,\n      startAfter: startAfter,\n    });\n\n    if (onProcess) {\n      onProcess(history);\n    } \n    \n    if (returnsResponse) {\n      res.json(history);\n    } else {\n      req.zerowidthHistory = history;\n      next();\n    }\n  } catch (error) {\n    // console.error('History retrieval failed:', error);\n\n    if(onError && error.response) {\n      onError(error.response.data);\n    }\n\n    res.status(500).send('Internal Server Error');\n  }\n};\n\nexport default function ZeroWidthApiExpress({ secretKey, onProcess, onError, returnsResponse = true }) {\n  const router = express.Router();\n\n  // POST route to process data\n  router.post('/process/:app_id/:intelligence_id', (req, res, next) => {\n    processRouteHandler(req, res, next, secretKey, onProcess, onError, returnsResponse);\n  });\n\n  // GET route to retrieve history\n  router.get('/history/:app_id/:intelligence_id/:user_id/:session_id', (req, res, next) => {\n    historyRouteHandler(req, res, next, secretKey, onProcess, onError, returnsResponse);\n  });\n\n  return router;\n}\n"],"names":[],"version":3,"file":"main.cjs.map","sourceRoot":"../../"}