{"mappings":"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","sources":["<anon>","src/index.js","src/ZeroWidthApi.js","src/ZeroWidthApiExpress.js"],"sourcesContent":["var $e2pLI$axios = require(\"axios\");\nvar $e2pLI$express = require(\"express\");\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n$parcel$export(module.exports, \"ZeroWidthApi\", () => $497d2e909cf7dfb6$export$2e2bcd8739ae039);\n$parcel$export(module.exports, \"ZeroWidthApiExpress\", () => $1be5594902a7503e$export$2e2bcd8739ae039);\n// index.js\n\nclass $497d2e909cf7dfb6$var$ZeroWidthApi {\n    constructor({ secretKey: secretKey, endpointId: endpointId, agentId: agentId, baseUrl: baseUrl }){\n        // Validate input parameters\n        if (!secretKey) throw new Error(\"Missing required constructor parameters: secretKey, and endpointId must be provided\");\n        this.secretKey = secretKey.trim();\n        this.endpointId = endpointId;\n        this.agentId = agentId;\n        this.baseUrl = baseUrl || \"https://api.zerowidth.ai/beta\";\n    }\n    async executeToolFunction(toolFunction, args) {\n        try {\n            // Check if the function returns a promise\n            const result = toolFunction(args);\n            if (result instanceof Promise) // Handle as async function\n            return await result;\n            else // Handle as a synchronous function or a function that uses a callback\n            return result;\n        } catch (error) {\n            // Handle errors\n            throw error;\n        }\n    }\n    async makeApiCall(endpoint, options = {}) {\n        const url = `${this.baseUrl}/${endpoint}`;\n        const headers = {\n            \"Authorization\": `Bearer ${this.secretKey}`,\n            \"Content-Type\": \"application/json\",\n            ...options.headers\n        };\n        try {\n            const response = await (0, ($parcel$interopDefault($e2pLI$axios)))({\n                method: options.method || \"get\",\n                url: url,\n                headers: headers,\n                data: options.body,\n                params: options.params\n            });\n            return response.data;\n        } catch (error) {\n            const { errorMessage: errorMessage, statusCode: statusCode } = this.formatError(error);\n            console.error(errorMessage);\n            let err = new Error(errorMessage);\n            err.statusCode = statusCode;\n            throw err;\n        }\n    }\n    // Process data through installed agent\n    async process({ endpointId: endpointId, agentId: agentId, data: data, userId: userId, sessionId: sessionId, stateful: stateful, verbose: verbose, tools: tools } = {}) {\n        let url = `process/${endpointId || this.endpointId}/${agentId || this.agentId}`;\n        if (verbose) url += \"?verbose=true\";\n        console.log(\"url\", url);\n        if (stateful && (!userId || !sessionId)) throw new Error(\"Stateful processing requires a userId and sessionId\");\n        // Recursive internal function to handle tool calls\n        const processWithTools = async (requestData)=>{\n            const result = await this.makeApiCall(url, {\n                method: \"post\",\n                body: {\n                    user_id: userId,\n                    session_id: sessionId,\n                    stateful: stateful,\n                    data: requestData\n                }\n            });\n            if (tools && result.output_data && result.output_data.tool_calls) {\n                let messageAutoAdded = false;\n                for (let tool_call of result.output_data.tool_calls){\n                    if (tool_call.type === \"function\") {\n                        if (tools.functions && tool_call.function && tools.functions[tool_call.function.name]) {\n                            if (!messageAutoAdded) {\n                                // Add the API result to the messages array\n                                requestData.messages.push(result.output_data);\n                                messageAutoAdded = true;\n                            }\n                            const tool_result = await this.executeToolFunction(tools.functions[tool_call.function.name], JSON.parse(tool_call.function.arguments));\n                            // Add the function response to the messages array\n                            requestData.messages.push({\n                                role: \"tool\",\n                                tool_call_id: tool_call.id,\n                                content: tool_result,\n                                timestamp: new Date().toISOString()\n                            });\n                        }\n                    }\n                }\n                // Recursively process the updated request data\n                return await processWithTools(requestData);\n            }\n            return result;\n        };\n        return await processWithTools(data);\n    }\n    // Method to get history with pagination support\n    async getHistory({ endpointId: endpointId, agentId: agentId, userId: userId, sessionId: sessionId, startAfter: startAfter } = {}) {\n        const endpoint = `history/${endpointId || this.endpointId}/${agentId || this.agentId}/${userId}/${sessionId}`;\n        const params = startAfter ? {\n            startAfter: startAfter\n        } : {};\n        return this.makeApiCall(endpoint, {\n            method: \"GET\",\n            params: params\n        });\n    }\n    formatError(error) {\n        let errorMessage = \"An error occurred\";\n        let statusCode = null;\n        if (error.response) {\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            errorMessage = `API Error: ${JSON.stringify(error.response.data, null, 2)}`;\n            statusCode = error.response.status;\n        } else if (error.request) // The request was made but no response was received\n        errorMessage = \"Network Error: No response received from the server.\";\n        else // Something else, like an error in setting up the request\n        errorMessage = `Request Error: ${error.message}`;\n        return {\n            errorMessage: errorMessage,\n            statusCode: statusCode\n        };\n    }\n}\nvar $497d2e909cf7dfb6$export$2e2bcd8739ae039 = $497d2e909cf7dfb6$var$ZeroWidthApi;\n\n\n// ZeroWidthApiMiddleware.js\n\n\nconst $1be5594902a7503e$var$processRouteHandler = async ({ req: req, res: res, next: next, secretKey: secretKey, baseUrl: baseUrl, onProcess: onProcess, onError: onError, returnsResponse: returnsResponse, tools: tools })=>{\n    const { endpoint_id: endpoint_id, agent_id: agent_id } = req.params;\n    const zerowidthApi = new (0, $497d2e909cf7dfb6$export$2e2bcd8739ae039)({\n        secretKey: secretKey,\n        endpointId: endpoint_id,\n        agentId: agent_id,\n        baseUrl: baseUrl\n    });\n    const processApiResponse = async (requestData)=>{\n        try {\n            const result = await zerowidthApi.process({\n                ...requestData,\n                tools: tools\n            });\n            if (onProcess) onProcess(result);\n            return result;\n        } catch (error) {\n            console.error(\"API call failed:\", error);\n            if (onError && error.response) onError(error.response.data);\n            throw error;\n        }\n    };\n    try {\n        const finalResult = await processApiResponse(req.body);\n        if (returnsResponse) res.json(finalResult.output_data);\n        else {\n            req.zerowidthResult = finalResult;\n            next();\n        }\n    } catch (error) {\n        next(error);\n    }\n};\nconst $1be5594902a7503e$var$historyRouteHandler = async ({ req: req, res: res, next: next, secretKey: secretKey, baseUrl: baseUrl, onProcess: onProcess, onError: onError, returnsResponse: returnsResponse })=>{\n    const { endpoint_id: endpoint_id, agent_id: agent_id, user_id: user_id, session_id: session_id } = req.params;\n    const { startAfter: startAfter } = req.query;\n    const zerowidthApi = new (0, $497d2e909cf7dfb6$export$2e2bcd8739ae039)({\n        secretKey: secretKey,\n        endpointId: endpoint_id,\n        agentId: agent_id,\n        baseUrl: baseUrl\n    });\n    try {\n        const history = await zerowidthApi.getHistory({\n            userId: user_id,\n            sessionId: session_id,\n            startAfter: startAfter\n        });\n        if (onProcess) onProcess(history);\n        if (returnsResponse) res.json(history);\n        else {\n            req.zerowidthHistory = history;\n            next();\n        }\n    } catch (error) {\n        console.error(\"History retrieval failed:\", error);\n        if (onError && error.response) onError(error.response.data);\n        res.status(500).send(\"Internal Server Error\");\n    }\n};\nfunction $1be5594902a7503e$export$2e2bcd8739ae039({ secretKey: secretKey, baseUrl: baseUrl, onProcess: onProcess, onError: onError, returnsResponse: returnsResponse = true, tools: tools }) {\n    const router = (0, ($parcel$interopDefault($e2pLI$express))).Router();\n    // POST route to process data\n    router.post(\"/process/:endpoint_id/:agent_id\", (req, res, next)=>{\n        $1be5594902a7503e$var$processRouteHandler({\n            req: req,\n            res: res,\n            next: next,\n            secretKey: secretKey,\n            baseUrl: baseUrl,\n            onProcess: onProcess,\n            onError: onError,\n            returnsResponse: returnsResponse,\n            tools: tools\n        });\n    });\n    // GET route to retrieve history\n    router.get(\"/history/:endpoint_id/:agent_id/:user_id/:session_id\", (req, res, next)=>{\n        $1be5594902a7503e$var$historyRouteHandler({\n            req: req,\n            res: res,\n            next: next,\n            secretKey: secretKey,\n            baseUrl: baseUrl,\n            onProcess: onProcess,\n            onError: onError,\n            returnsResponse: returnsResponse\n        });\n    });\n    return router;\n}\n\n\n\n\n//# sourceMappingURL=main.cjs.map\n","// index.js\nimport ZeroWidthApi from './ZeroWidthApi.js';\nimport ZeroWidthApiExpress from './ZeroWidthApiExpress.js';\n\nexport { ZeroWidthApi, ZeroWidthApiExpress };\n","import axios from 'axios';\n\n\nclass ZeroWidthApi {\n  constructor({ secretKey, endpointId, agentId, baseUrl }) {\n    \n    // Validate input parameters\n    if (!secretKey) {\n      throw new Error('Missing required constructor parameters: secretKey, and endpointId must be provided');\n    }\n\n    this.secretKey = secretKey.trim();\n    this.endpointId = endpointId;\n    this.agentId = agentId;\n    this.baseUrl = baseUrl || 'https://api.zerowidth.ai/beta';\n  }\n\n\n  async executeToolFunction (toolFunction, args) {\n    try {\n      // Check if the function returns a promise\n      const result = toolFunction(args);\n      if (result instanceof Promise) {\n        // Handle as async function\n        return await result;\n      } else {\n        // Handle as a synchronous function or a function that uses a callback\n        return result;\n      }\n    } catch (error) {\n      // Handle errors\n      throw error;\n    }\n  };\n\n  async makeApiCall(endpoint, options = {}) {\n    const url = `${this.baseUrl}/${endpoint}`;\n\n    const headers = {\n      'Authorization': `Bearer ${this.secretKey}`,\n      'Content-Type': 'application/json',\n      ...options.headers,\n    };\n\n    try {\n      const response = await axios({\n        method: options.method || 'get',\n        url,\n        headers,\n        data: options.body,\n        params: options.params,\n      });\n      \n      return response.data;\n    } catch (error) {\n      const { errorMessage, statusCode } = this.formatError(error);\n      \n      console.error(errorMessage);\n      \n      let err = new Error(errorMessage);\n      err.statusCode = statusCode;\n      \n      throw err;\n    }\n  }\n\n  // Process data through installed agent\n  async process({ endpointId, agentId, data, userId, sessionId, stateful, verbose, tools } = {}) {\n    let url = `process/${endpointId || this.endpointId}/${agentId || this.agentId}`;\n    if (verbose) url += \"?verbose=true\";\n\n    console.log('url', url);\n\n    if (stateful && (!userId || !sessionId)) {\n      throw new Error(\"Stateful processing requires a userId and sessionId\");\n    }\n\n    // Recursive internal function to handle tool calls\n    const processWithTools = async (requestData) => {\n      const result = await this.makeApiCall(url, {\n        method: 'post',\n        body: {\n          user_id: userId,\n          session_id: sessionId,\n          stateful,\n          data: requestData\n        },\n      });\n\n      if (tools && result.output_data && result.output_data.tool_calls) {\n\n        let messageAutoAdded = false;\n        \n\n        for (let tool_call of result.output_data.tool_calls) {\n          if (tool_call.type === 'function') {\n            if (tools.functions && tool_call.function && tools.functions[tool_call.function.name]) {\n\n              if(!messageAutoAdded){\n                // Add the API result to the messages array\n                requestData.messages.push(result.output_data);\n                messageAutoAdded = true;\n              }\n              \n              const tool_result = await this.executeToolFunction(tools.functions[tool_call.function.name], JSON.parse(tool_call.function.arguments));\n              \n\n              // Add the function response to the messages array\n              requestData.messages.push({\n                role: 'tool',\n                tool_call_id: tool_call.id,\n                content: tool_result,\n                timestamp: new Date().toISOString()\n              });\n\n            }\n          }\n        }\n\n        // Recursively process the updated request data\n        return await processWithTools(requestData);\n      }\n\n      return result;\n    };\n\n    return await processWithTools(data);\n  }\n\n  // Method to get history with pagination support\n  async getHistory({ endpointId, agentId, userId, sessionId, startAfter } = {}) {\n\n    const endpoint = `history/${endpointId || this.endpointId}/${agentId || this.agentId}/${userId}/${sessionId}`;\n    const params = startAfter ? { startAfter } : {};\n\n    return this.makeApiCall(endpoint, {\n      method: 'GET',\n      params: params, // Pass startAfter as a query parameter if it exists\n    });\n  }\n\n   formatError(error) {\n    let errorMessage = \"An error occurred\";\n    let statusCode = null;\n  \n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      errorMessage = `API Error: ${JSON.stringify(error.response.data, null, 2)}`;\n      statusCode = error.response.status;\n    } else if (error.request) {\n      // The request was made but no response was received\n      errorMessage = \"Network Error: No response received from the server.\";\n    } else {\n      // Something else, like an error in setting up the request\n      errorMessage = `Request Error: ${error.message}`;\n    }\n  \n    return { errorMessage, statusCode };\n  }\n\n}\n\n\nexport default ZeroWidthApi;","// ZeroWidthApiMiddleware.js\nimport express from 'express';\nimport ZeroWidthApi from './ZeroWidthApi.js'; \n\nconst processRouteHandler = async ({ req, res, next, secretKey, baseUrl, onProcess, onError, returnsResponse, tools }) => {\n  const { endpoint_id, agent_id } = req.params;\n\n  const zerowidthApi = new ZeroWidthApi({\n    secretKey: secretKey,\n    endpointId: endpoint_id,\n    agentId: agent_id,\n    baseUrl: baseUrl\n  });\n  \n\n  const processApiResponse = async (requestData) => {\n    try {\n      const result = await zerowidthApi.process({\n        ...requestData,\n        tools: tools,\n      });\n      if (onProcess) {\n        onProcess(result);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('API call failed:', error);\n      if (onError && error.response) {\n        onError(error.response.data);\n      }\n      throw error;\n    }\n  };\n\n  try {\n    const finalResult = await processApiResponse(req.body);\n\n    if (returnsResponse) {\n      res.json(finalResult.output_data);\n    } else {\n      req.zerowidthResult = finalResult;\n      next();\n    }\n  } catch (error) {\n    next(error);\n  }\n};\n\n\nconst historyRouteHandler = async ({req, res, next, secretKey, baseUrl, onProcess, onError, returnsResponse}) => {\n  const { endpoint_id, agent_id, user_id, session_id } = req.params;\n  const { startAfter } = req.query;\n  \n  \n  const zerowidthApi = new ZeroWidthApi({\n    secretKey: secretKey,\n    endpointId: endpoint_id,\n    agentId: agent_id,\n    baseUrl: baseUrl\n  });\n\n  try {\n    const history = await zerowidthApi.getHistory({\n      userId: user_id,\n      sessionId: session_id,\n      startAfter: startAfter,\n    });\n\n    if (onProcess) {\n      onProcess(history);\n    } \n    \n    if (returnsResponse) {\n      res.json(history);\n    } else {\n      req.zerowidthHistory = history;\n      next();\n    }\n  } catch (error) {\n    console.error('History retrieval failed:', error);\n\n    if(onError && error.response) {\n      onError(error.response.data);\n    }\n\n    res.status(500).send('Internal Server Error');\n  }\n};\n\nexport default function ZeroWidthApiExpress({ secretKey, baseUrl, onProcess, onError, returnsResponse = true, tools }) {\n  const router = express.Router();\n\n  // POST route to process data\n  router.post('/process/:endpoint_id/:agent_id', (req, res, next) => {\n    processRouteHandler({req, res, next, secretKey, baseUrl, onProcess, onError, returnsResponse, tools});\n  });\n\n  // GET route to retrieve history\n  router.get('/history/:endpoint_id/:agent_id/:user_id/:session_id', (req, res, next) => {\n    historyRouteHandler({req, res, next, secretKey, baseUrl, onProcess, onError, returnsResponse});\n  });\n\n  return router;\n}\n"],"names":["$e2pLI$axios","require","$e2pLI$express","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$interopDefault","a","__esModule","default","module","exports","$497d2e909cf7dfb6$export$2e2bcd8739ae039","$1be5594902a7503e$export$2e2bcd8739ae039","constructor","secretKey","endpointId","agentId","baseUrl","Error","trim","executeToolFunction","toolFunction","args","result","Promise","error","makeApiCall","endpoint","options","url","headers","response","method","data","body","params","errorMessage","statusCode","formatError","console","err","process","userId","sessionId","stateful","verbose","tools","log","processWithTools","requestData","user_id","session_id","output_data","tool_calls","messageAutoAdded","tool_call","type","functions","function","name","messages","push","tool_result","JSON","parse","arguments","role","tool_call_id","id","content","timestamp","Date","toISOString","getHistory","startAfter","stringify","status","request","message","$1be5594902a7503e$var$processRouteHandler","req","res","next","onProcess","onError","returnsResponse","endpoint_id","agent_id","zerowidthApi","processApiResponse","finalResult","json","zerowidthResult","$1be5594902a7503e$var$historyRouteHandler","query","history","zerowidthHistory","send","router","Router","post"],"version":3,"file":"main.cjs.map"}