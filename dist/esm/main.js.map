{"mappings":"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","sources":["src/index.js","src/ZeroWidthApi.js","src/ZeroWidthApiExpress.js"],"sourcesContent":["// index.js\nimport ZeroWidthApi from './ZeroWidthApi.js';\nimport ZeroWidthApiExpress from './ZeroWidthApiExpress.js';\n\nexport { ZeroWidthApi, ZeroWidthApiExpress };\n","import axios from 'axios';\n\n\nclass ZeroWidthApi {\n  constructor({ secretKey, endpointId, agentId, baseUrl }) {\n    \n    // Validate input parameters\n    if (!secretKey) {\n      throw new Error('Missing required constructor parameters: secretKey, and endpointId must be provided');\n    }\n\n    this.secretKey = secretKey.trim();\n    this.endpointId = endpointId;\n    this.agentId = agentId;\n    this.baseUrl = baseUrl || 'https://api.zerowidth.ai/beta';\n  }\n\n\n  async executeToolFunction (toolFunction, args) {\n    try {\n      // Check if the function returns a promise\n      const result = toolFunction(args);\n      if (result instanceof Promise) {\n        // Handle as async function\n        return await result;\n      } else {\n        // Handle as a synchronous function or a function that uses a callback\n        return result;\n      }\n    } catch (error) {\n      // Handle errors\n      throw error;\n    }\n  };\n\n  async makeApiCall(endpoint, options = {}) {\n    const url = `${this.baseUrl}/${endpoint}`;\n\n    const headers = {\n      'Authorization': `Bearer ${this.secretKey}`,\n      'Content-Type': 'application/json',\n      ...options.headers,\n    };\n\n    try {\n      const response = await axios({\n        method: options.method || 'get',\n        url,\n        headers,\n        data: options.body,\n        params: options.params,\n      });\n      \n      return response.data;\n    } catch (error) {\n      const { errorMessage, statusCode } = this.formatError(error);\n      \n      console.error(errorMessage);\n      \n      let err = new Error(errorMessage);\n      err.statusCode = statusCode;\n      \n      throw err;\n    }\n  }\n\n  // Process data through installed agent\n  async process({ endpointId, agentId, data, userId, sessionId, stateful, verbose, tools } = {}) {\n    let url = `process/${endpointId || this.endpointId}/${agentId || this.agentId}`;\n    if (verbose) url += \"?verbose=true\";\n\n    console.log('url', url);\n\n    if (stateful && (!userId || !sessionId)) {\n      throw new Error(\"Stateful processing requires a userId and sessionId\");\n    }\n\n    // Recursive internal function to handle tool calls\n    const processWithTools = async (requestData) => {\n      const result = await this.makeApiCall(url, {\n        method: 'post',\n        body: {\n          user_id: userId,\n          session_id: sessionId,\n          stateful,\n          data: requestData\n        },\n      });\n\n      if (tools && result.output_data && result.output_data.tool_calls) {\n\n        let messageAutoAdded = false;\n        \n\n        for (let tool_call of result.output_data.tool_calls) {\n          if (tool_call.type === 'function') {\n            if (tools.functions && tool_call.function && tools.functions[tool_call.function.name]) {\n\n              if(!messageAutoAdded){\n                // Add the API result to the messages array\n                requestData.messages.push(result.output_data);\n                messageAutoAdded = true;\n              }\n              \n              const tool_result = await this.executeToolFunction(tools.functions[tool_call.function.name], JSON.parse(tool_call.function.arguments));\n              \n\n              // Add the function response to the messages array\n              requestData.messages.push({\n                role: 'tool',\n                tool_call_id: tool_call.id,\n                content: tool_result,\n                timestamp: new Date().toISOString()\n              });\n\n            }\n          }\n        }\n\n        // Recursively process the updated request data\n        return await processWithTools(requestData);\n      }\n\n      return result;\n    };\n\n    return await processWithTools(data);\n  }\n\n  // Method to get history with pagination support\n  async getHistory({ endpointId, agentId, userId, sessionId, startAfter } = {}) {\n\n    const endpoint = `history/${endpointId || this.endpointId}/${agentId || this.agentId}/${userId}/${sessionId}`;\n    const params = startAfter ? { startAfter } : {};\n\n    return this.makeApiCall(endpoint, {\n      method: 'GET',\n      params: params, // Pass startAfter as a query parameter if it exists\n    });\n  }\n\n   formatError(error) {\n    let errorMessage = \"An error occurred\";\n    let statusCode = null;\n  \n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      errorMessage = `API Error: ${JSON.stringify(error.response.data, null, 2)}`;\n      statusCode = error.response.status;\n    } else if (error.request) {\n      // The request was made but no response was received\n      errorMessage = \"Network Error: No response received from the server.\";\n    } else {\n      // Something else, like an error in setting up the request\n      errorMessage = `Request Error: ${error.message}`;\n    }\n  \n    return { errorMessage, statusCode };\n  }\n\n}\n\n\nexport default ZeroWidthApi;","// ZeroWidthApiMiddleware.js\nimport express from 'express';\nimport ZeroWidthApi from './ZeroWidthApi.js'; \n\nconst processRouteHandler = async ({ req, res, next, secretKey, baseUrl, onProcess, onError, returnsResponse, tools }) => {\n  const { endpoint_id, agent_id } = req.params;\n\n  const zerowidthApi = new ZeroWidthApi({\n    secretKey: secretKey,\n    endpointId: endpoint_id,\n    agentId: agent_id,\n    baseUrl: baseUrl\n  });\n  \n\n  const processApiResponse = async (requestData) => {\n    try {\n      const result = await zerowidthApi.process(requestData);\n      if (onProcess) {\n        onProcess(result);\n      }\n\n      return result;\n    } catch (error) {\n      console.error('API call failed:', error);\n      if (onError && error.response) {\n        onError(error.response.data);\n      }\n      throw error;\n    }\n  };\n\n  try {\n    const finalResult = await processApiResponse(req.body);\n\n    if (returnsResponse) {\n      res.json(finalResult.output_data);\n    } else {\n      req.zerowidthResult = finalResult;\n      next();\n    }\n  } catch (error) {\n    next(error);\n  }\n};\n\n\nconst historyRouteHandler = async ({req, res, next, secretKey, baseUrl, onProcess, onError, returnsResponse}) => {\n  const { endpoint_id, agent_id, user_id, session_id } = req.params;\n  const { startAfter } = req.query;\n  \n  \n  const zerowidthApi = new ZeroWidthApi({\n    secretKey: secretKey,\n    endpointId: endpoint_id,\n    agentId: agent_id,\n    baseUrl: baseUrl\n  });\n\n  try {\n    const history = await zerowidthApi.getHistory({\n      userId: user_id,\n      sessionId: session_id,\n      startAfter: startAfter,\n    });\n\n    if (onProcess) {\n      onProcess(history);\n    } \n    \n    if (returnsResponse) {\n      res.json(history);\n    } else {\n      req.zerowidthHistory = history;\n      next();\n    }\n  } catch (error) {\n    console.error('History retrieval failed:', error);\n\n    if(onError && error.response) {\n      onError(error.response.data);\n    }\n\n    res.status(500).send('Internal Server Error');\n  }\n};\n\nexport default function ZeroWidthApiExpress({ secretKey, baseUrl, onProcess, onError, returnsResponse = true, tools }) {\n  const router = express.Router();\n\n  // POST route to process data\n  router.post('/process/:endpoint_id/:agent_id', (req, res, next) => {\n    processRouteHandler({req, res, next, secretKey, baseUrl, onProcess, onError, returnsResponse, tools});\n  });\n\n  // GET route to retrieve history\n  router.get('/history/:endpoint_id/:agent_id/:user_id/:session_id', (req, res, next) => {\n    historyRouteHandler({req, res, next, secretKey, baseUrl, onProcess, onError, returnsResponse});\n  });\n\n  return router;\n}\n"],"names":[],"version":3,"file":"main.js.map"}