{"mappings":"A,O,M,O,C,I,E,C,ECmEA,EAjEA,MACE,YAAY,CAAA,UAAE,CAAS,CAAA,MAAE,CAAK,CAAA,eAAE,CAAc,CAAE,CAAE,CAEhD,4BAA4B;AAC5B,GAAI,CAAC,GAAa,CAAC,GAAS,CAAC,EAC3B,MAAM,AAAI,MAAM,iGAGlB,CAAA,IAAI,CAAC,SAAS,CAAG,EACjB,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,cAAc,CAAG,EACtB,IAAI,CAAC,OAAO,CAAG,0BACjB,CAEA,MAAM,YAAY,CAAQ,CAAE,EAAU,CAAC,CAAC,CAAE,CACxC,IAAM,EAAM,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,EAAS,CAAC,CAEnC,EAAU,CACd,cAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAC3C,eAAgB,mBAChB,GAAG,EAAQ,OAAO,AACpB,EAEA,GAAI,CACF,IAAM,EAAW,MAAM,AAAA,EAAM,CAC3B,OAAQ,EAAQ,MAAM,EAAI,MAC1B,IAAA,EACA,QAAA,EACA,KAAM,EAAQ,IAAI,CAClB,OAAQ,EAAQ,MAAM,AACxB,GACA,OAAO,EAAS,IAAI,AACtB,CAAE,MAAO,EAAO,CAEd,MADA,QAAQ,KAAK,CAAC,yBAA0B,GAClC,CACR,CACF,CAEA,iDAAiD;AACjD,MAAM,QAAQ,CAAA,SAAC,CAAQ,CAAA,QAAE,CAAO,CAAA,UAAE,CAAS,CAAA,OAAE,CAAM,CAAA,UAAE,CAAS,CAAA,SAAE,CAAQ,CAAA,QAAE,CAAO,CAAC,CAAE,CAElF,IAAI,EAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAGxD,GAFG,GAAS,CAAA,GAAO,eAAnB,EAEG,GAAa,CAAA,CAAC,GAAU,CAAC,CAAA,EAAY,MAAM,AAAI,MAAM,uDACxD,GAAG,GAAY,EAAU,MAAM,AAAI,MAAM,0DACzC,GAAG,GAAY,CAAC,EAAS,MAAM,AAAI,MAAM,wDAEzC,OAAO,IAAI,CAAC,WAAW,CAAC,EAAK,CAC3B,OAAQ,OACR,KAAM,CACJ,QAAS,EACT,WAAY,EACZ,SAAA,EACA,KAAM,CACJ,QAAA,EACA,SAAA,EACA,UAAA,CACF,CACF,CACF,EACF,CAEF,S,K,O,C,iC","sources":["<anon>","src/index.js"],"sourcesContent":["import $eq4fz$axios from \"axios\";\n\nvar $c7cd4a810d0ec338$exports = {};\n\nclass $c7cd4a810d0ec338$var$ZeroWidthAPI {\n    constructor({ secretKey: secretKey, appId: appId, intelligenceId: intelligenceId }){\n        // Validate input parameters\n        if (!secretKey || !appId || !intelligenceId) throw new Error(\"Missing required constructor parameters: secretKey, appId, and intelligenceId must be provided\");\n        this.secretKey = secretKey;\n        this.appId = appId;\n        this.intelligenceId = intelligenceId;\n        this.baseUrl = \"https://api.zerowidth.ai\";\n    }\n    async makeApiCall(endpoint, options = {}) {\n        const url = `${this.baseUrl}/${endpoint}`;\n        const headers = {\n            \"Authorization\": `Bearer ${this.secretKey}`,\n            \"Content-Type\": \"application/json\",\n            ...options.headers\n        };\n        try {\n            const response = await (0, $eq4fz$axios)({\n                method: options.method || \"get\",\n                url: url,\n                headers: headers,\n                data: options.body,\n                params: options.params\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Error making API call:\", error);\n            throw error;\n        }\n    }\n    // Process data through an installed intellgience\n    async process({ messages: messages, message: message, variables: variables, userId: userId, sessionId: sessionId, stateful: stateful, verbose: verbose }) {\n        let url = `process/${this.appId}/${this.intelligenceId}`;\n        if (verbose) url += \"?verbose=true\";\n        if (stateful && (!userId || !sessionId)) throw new Error(\"Stateful processing requires a userId and sessionId\");\n        if (stateful && messages) throw new Error(\"Stateful processing does not support multiple messages\");\n        if (stateful && !message) throw new Error(\"Stateful processing requires a single message object\");\n        return this.makeApiCall(url, {\n            method: \"POST\",\n            body: {\n                user_id: userId,\n                session_id: sessionId,\n                stateful: stateful,\n                data: {\n                    message: message,\n                    messages: messages,\n                    variables: variables\n                }\n            }\n        });\n    }\n}\n$c7cd4a810d0ec338$exports = $c7cd4a810d0ec338$var$ZeroWidthAPI;\n\n\nexport {$c7cd4a810d0ec338$exports as default};\n//# sourceMappingURL=main.js.map\n","import axios from 'axios';\n\nclass ZeroWidthAPI {\n  constructor({ secretKey, appId, intelligenceId }) {\n    \n    // Validate input parameters\n    if (!secretKey || !appId || !intelligenceId) {\n      throw new Error('Missing required constructor parameters: secretKey, appId, and intelligenceId must be provided');\n    }\n\n    this.secretKey = secretKey;\n    this.appId = appId;\n    this.intelligenceId = intelligenceId;\n    this.baseUrl = 'https://api.zerowidth.ai';\n  }\n\n  async makeApiCall(endpoint, options = {}) {\n    const url = `${this.baseUrl}/${endpoint}`;\n    \n    const headers = {\n      'Authorization': `Bearer ${this.secretKey}`,\n      'Content-Type': 'application/json',\n      ...options.headers,\n    };\n\n    try {\n      const response = await axios({\n        method: options.method || 'get',\n        url,\n        headers,\n        data: options.body,\n        params: options.params,\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error making API call:', error);\n      throw error;\n    }\n  }\n\n  // Process data through an installed intellgience\n  async process({messages, message, variables, userId, sessionId, stateful, verbose}) {\n    \n    let url = `process/${this.appId}/${this.intelligenceId}`;\n    if(verbose) url += \"?verbose=true\";\n\n    if(stateful && (!userId || !sessionId)) throw new Error(\"Stateful processing requires a userId and sessionId\");\n    if(stateful && messages) throw new Error(\"Stateful processing does not support multiple messages\");\n    if(stateful && !message) throw new Error(\"Stateful processing requires a single message object\");\n\n    return this.makeApiCall(url, {\n      method: 'POST',\n      body: {\n        user_id: userId,\n        session_id: sessionId,\n        stateful,\n        data: {\n          message, \n          messages, \n          variables\n        }\n      },\n    });\n  }\n\n}\n\nmodule.exports = ZeroWidthAPI;\n"],"names":["$eq4fz$axios","$c7cd4a810d0ec338$exports","constructor","secretKey","appId","intelligenceId","Error","baseUrl","makeApiCall","endpoint","options","url","headers","response","method","data","body","params","error","console","process","messages","message","variables","userId","sessionId","stateful","verbose","user_id","session_id","default"],"version":3,"file":"main.js.map"}